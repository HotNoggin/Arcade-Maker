// Includes
#include "Character.h"


Character::Character() {
	pixelRows = {};
}


Character::Character(std::array<Uint8, 16> pixels) {
	pixelRows = pixels;
}


// Returns true if there is a pixel at the pixel coordinate.
// Coordinates range from top-left (0, 0) to bottom-right (7, 15).
bool Character::getPixel(Uint8 x, Uint8 y) {
	if (x < 0 || y < 0 || x > 7 || y > 15) {
		return false;
	}
	return pixelRows[y] & (1 << (7 - x));
}


std::map<char, Character> font = {
	// Latin capitals, more symbols (Rows 2 / 3)
	{'A', Character({0x0, 0x0, 0x0, 0x7c, 0xc6, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0x0, 0x0, 0x0, 0x0})},
	{'B', Character({0x0, 0x0, 0x0, 0xfc, 0xc6, 0xc6, 0xc6, 0xfc, 0xc6, 0xc6, 0xc6, 0xfc, 0x0, 0x0, 0x0, 0x0})},
	{'C', Character({0x0, 0x0, 0x0, 0x7c, 0xc6, 0xc6, 0xc0, 0xc0, 0xc0, 0xc6, 0xc6, 0x7c, 0x0, 0x0, 0x0, 0x0})},
	{'D', Character({0x0, 0x0, 0x0, 0xfc, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xfc, 0x0, 0x0, 0x0, 0x0})},
	{'E', Character({0x0, 0x0, 0x0, 0xfe, 0xc0, 0xc0, 0xc0, 0xf8, 0xc0, 0xc0, 0xc0, 0xfe, 0x0, 0x0, 0x0, 0x0})},
	{'F', Character({0x0, 0x0, 0x0, 0xfe, 0xc0, 0xc0, 0xc0, 0xf8, 0xc0, 0xc0, 0xc0, 0xc0, 0x0, 0x0, 0x0, 0x0})},
	{'G', Character({0x0, 0x0, 0x0, 0x7c, 0xc6, 0xc6, 0xc0, 0xce, 0xc6, 0xc6, 0xc6, 0x7c, 0x0, 0x0, 0x0, 0x0})},
	{'H', Character({0x0, 0x0, 0x0, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0x0, 0x0, 0x0, 0x0})},
	{'I', Character({0x0, 0x0, 0x0, 0xfe, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xfe, 0x0, 0x0, 0x0, 0x0})},
	{'J', Character({0x0, 0x0, 0x0, 0xfe, 0xc, 0xc, 0xc, 0xc, 0xc, 0xcc, 0xcc, 0x78, 0x0, 0x0, 0x0, 0x0})},
	{'K', Character({0x0, 0x0, 0x0, 0xc6, 0xc6, 0xcc, 0xd8, 0xfc, 0xc6, 0xc6, 0xc6, 0xc6, 0x0, 0x0, 0x0, 0x0})},
	{'L', Character({0x0, 0x0, 0x0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc6, 0xfe, 0x0, 0x0, 0x0, 0x0})},
	{'M', Character({0x0, 0x0, 0x0, 0xc6, 0xee, 0xfe, 0xd6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x0, 0x0, 0x0, 0x0})},
	{'N', Character({0x0, 0x0, 0x0, 0xc6, 0xe6, 0xe6, 0xd6, 0xd6, 0xce, 0xce, 0xc6, 0xc6, 0x0, 0x0, 0x0, 0x0})},
	{'O', Character({0x0, 0x0, 0x0, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x0, 0x0, 0x0, 0x0})},
	{'P', Character({0x0, 0x0, 0x0, 0xfc, 0xc6, 0xc6, 0xc6, 0xfc, 0xc0, 0xc0, 0xc0, 0xc0, 0x0, 0x0, 0x0, 0x0})},
};